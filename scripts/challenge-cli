#!/bin/bash

# challenge-cli - A tool for managing Docker challenges
# Usage: challenge-cli <command>
# Commands:
#   list-challenges - List all available challenges
#   list-badges     - List all earned badges (completed challenges)
#   validate <challenge> - Validate a specific challenge
#   help            - Show this help message

CHALLENGES_DIR="$HOME/azure-docker-playground/challenges"
if [ ! -d "$CHALLENGES_DIR" ]; then
    # Try alternative path if the first one doesn't exist
    CHALLENGES_DIR="$(cd "$(dirname "$0")/.." && pwd)/challenges"
fi

# Check if challenges directory exists
if [ ! -d "$CHALLENGES_DIR" ]; then
    echo "Error: Challenges directory not found at $CHALLENGES_DIR"
    echo "Please make sure you're running this from the correct location."
    exit 1
fi

# Function to list all available challenges
list_challenges() {
    echo "Available challenges:"
    echo "--------------------"
    for challenge in "$CHALLENGES_DIR"/*; do
        if [ -d "$challenge" ]; then
            challenge_name=$(basename "$challenge")
            echo "- $challenge_name"
        fi
    done
}

# Function to validate a specific challenge
validate_challenge() {
    challenge_name="$1"
    challenge_path="$CHALLENGES_DIR/$challenge_name"
    
    if [ ! -d "$challenge_path" ]; then
        echo "Error: Challenge '$challenge_name' not found."
        echo "Use 'challenge-cli list-challenges' to see available challenges."
        return 1
    fi
    
    if [ ! -f "$challenge_path/validate.sh" ]; then
        echo "Error: Validation script not found for challenge '$challenge_name'."
        return 1
    fi
    
    echo "Validating challenge: $challenge_name"
    echo "------------------------------------"
    
    # Make sure the validation script is executable
    chmod +x "$challenge_path/validate.sh"
    
    # Run the validation script
    (cd "$challenge_path" && ./validate.sh)
    
    return $?
}

# Function to list all earned badges (completed challenges)
list_badges() {
    echo "Your earned badges:"
    echo "-----------------"
    
    earned_count=0
    total_count=0
    
    for challenge in "$CHALLENGES_DIR"/*; do
        if [ -d "$challenge" ] && [ -f "$challenge/validate.sh" ]; then
            challenge_name=$(basename "$challenge")
            total_count=$((total_count + 1))
            
            # Make the validation script executable
            chmod +x "$challenge/validate.sh"
            
            # Run the validation script silently
            if (cd "$challenge" && ./validate.sh >/dev/null 2>&1); then
                echo "✅ $challenge_name"
                earned_count=$((earned_count + 1))
            else
                echo "❌ $challenge_name"
            fi
        fi
    done
    
    echo ""
    echo "Progress: $earned_count/$total_count challenges completed"
    
    # Return success if all challenges are completed
    if [ $earned_count -eq $total_count ]; then
        return 0
    else
        return 1
    fi
}

# Function to show help
show_help() {
    echo "challenge-cli - A tool for managing Docker challenges"
    echo ""
    echo "Usage: challenge-cli <command>"
    echo ""
    echo "Commands:"
    echo "  list-challenges - List all available challenges"
    echo "  list-badges     - List all earned badges (completed challenges)"
    echo "  validate <challenge> - Validate a specific challenge"
    echo "  help            - Show this help message"
}

# Main script logic
case "$1" in
    list-challenges)
        list_challenges
        ;;
    list-badges)
        list_badges
        ;;
    validate)
        if [ -z "$2" ]; then
            echo "Error: Please specify a challenge to validate."
            echo "Usage: challenge-cli validate <challenge>"
            exit 1
        fi
        validate_challenge "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Error: Unknown command '$1'"
        echo ""
        show_help
        exit 1
        ;;
esac

exit $?
