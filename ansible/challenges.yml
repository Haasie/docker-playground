---
# Ansible playbook for deploying Docker challenges
- name: Deploy Docker challenges
  hosts: all
  become: true
  vars:
    acr_name: "{{ acr_name }}"
    acr_login_server: "{{ acr_login_server }}"
  tasks:
    - name: Set current user variable
      set_fact:
        current_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
        challenges_dir: "/home/{{ ansible_user | default(lookup('env', 'USER')) }}/docker-challenges"
    - name: Create challenges directory
      file:
        path: "{{ challenges_dir }}"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'

    # Challenge 1: Hello Container
    - name: Create Hello Container challenge directory
      file:
        path: "{{ challenges_dir }}/hello-container"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'

    - name: Copy Hello Container files
      copy:
        src: "{{ item.src }}"
        dest: "{{ challenges_dir }}/hello-container/{{ item.dest }}"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
      loop:
        - { src: '../challenges/hello-container/Dockerfile', dest: 'Dockerfile' }
        - { src: '../challenges/hello-container/index.html', dest: 'index.html' }
        - { src: '../challenges/hello-container/validate.sh', dest: 'validate.sh' }
        - { src: '../challenges/hello-container/README.md', dest: 'README.md' }

    # Challenge 2: Compose Master
    - name: Create Compose Master challenge directory
      file:
        path: "{{ challenges_dir }}/compose-master"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'

    - name: Copy Compose Master files
      copy:
        src: "{{ item.src }}"
        dest: "{{ challenges_dir }}/compose-master/{{ item.dest }}"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
      loop:
        - { src: '../challenges/compose-master/docker-compose.yml', dest: 'docker-compose.yml' }
        - { src: '../challenges/compose-master/validate.sh', dest: 'validate.sh' }
        - { src: '../challenges/compose-master/README.md', dest: 'README.md' }

    # Challenge 3: Custom Image
    - name: Create Custom Image challenge directory
      file:
        path: "{{ challenges_dir }}/custom-image"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'

    - name: Copy Custom Image files
      copy:
        src: "{{ item.src }}"
        dest: "{{ challenges_dir }}/custom-image/{{ item.dest }}"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
      loop:
        - { src: '../challenges/custom-image/Dockerfile', dest: 'Dockerfile' }
        - { src: '../challenges/custom-image/app.py', dest: 'app.py' }
        - { src: '../challenges/custom-image/requirements.txt', dest: 'requirements.txt' }
        - { src: '../challenges/custom-image/build-and-push.sh', dest: 'build-and-push.sh' }
        - { src: '../challenges/custom-image/validate.sh', dest: 'validate.sh' }
        - { src: '../challenges/custom-image/README.md', dest: 'README.md' }

    # Install challenge CLI tool
    - name: Check if challenge-cli directory exists
      stat:
        path: "{{ playbook_dir }}/../gamification/challenge-cli"
      register: challenge_cli_dir

    - name: Create Python user directories with correct permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
      loop:
        - "/home/{{ current_user }}/.local"
        - "/home/{{ current_user }}/.local/bin"
        - "/home/{{ current_user }}/.local/lib"
        - "/home/{{ current_user }}/.local/lib/python3.10"
        - "/home/{{ current_user }}/.local/lib/python3.10/site-packages"
      when: challenge_cli_dir.stat.exists

    - name: Install challenge CLI tool using pip
      shell: "pip3 install --user {{ playbook_dir }}/../gamification/challenge-cli"
      args:
        executable: /bin/bash
      become: false
      register: pip_result
      failed_when: pip_result.rc != 0 and 'already satisfied' not in pip_result.stderr
      when: challenge_cli_dir.stat.exists

    - name: Add ~/.local/bin to PATH in .bashrc if not already there
      lineinfile:
        path: "/home/{{ current_user }}/.bashrc"
        line: 'export PATH=$PATH:$HOME/.local/bin'
        state: present
      when: challenge_cli_dir.stat.exists

    # Set up environment variables for ACR access
    - name: Create .env file with ACR info
      template:
        src: ../templates/env.j2
        dest: "{{ challenges_dir }}/.env"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0600'

    # Create Desktop directory if it doesn't exist
    - name: Check if Desktop directory exists
      stat:
        path: "/home/{{ current_user }}/Desktop"
      register: desktop_dir

    - name: Create Desktop directory if it doesn't exist
      file:
        path: "/home/{{ current_user }}/Desktop"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
      when: not desktop_dir.stat.exists

    # Create desktop shortcut for challenges
    - name: Create challenges desktop shortcut
      copy:
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Docker Challenges
          Comment=Open Docker Challenges Folder
          Exec=xfce4-terminal --working-directory={{ challenges_dir }}
          Icon=utilities-terminal
          Terminal=false
          Categories=Development;
        dest: "/home/{{ current_user }}/Desktop/docker-challenges.desktop"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
