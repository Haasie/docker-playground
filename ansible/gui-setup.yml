---
# Ansible playbook for setting up Ubuntu Desktop with xRDP and development tools
- name: Setup GUI environment with xRDP
  hosts: all
  become: true
  pre_tasks:
    - name: Check if dpkg is interrupted
      shell: dpkg-query -l | grep -q '^.H'
      register: dpkg_interrupted
      failed_when: false
      changed_when: false

    - name: Fix interrupted dpkg
      shell: dpkg --configure -a
      when: dpkg_interrupted.rc == 0

    - name: Update apt cache after fixing dpkg
      apt:
        update_cache: yes
      when: dpkg_interrupted.rc == 0

  tasks:
    - name: Set current user variable
      set_fact:
        current_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install Ubuntu Desktop (minimal installation)
      apt:
        name: ubuntu-desktop-minimal
        state: present

    - name: Install xRDP
      apt:
        name: xrdp
        state: present

    - name: Add xrdp user to ssl-cert group for certificate access
      user:
        name: xrdp
        groups: ssl-cert
        append: yes
      notify: Restart xRDP

    - name: Install Firefox
      apt:
        name: firefox
        state: present

    - name: Install VS Code
      block:
        - name: Download VS Code GPG key
          get_url:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: /tmp/microsoft.asc

        - name: Add VS Code GPG key
          apt_key:
            file: /tmp/microsoft.asc
            state: present

        - name: Add VS Code repository
          apt_repository:
            repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
            state: present
            filename: vscode

        - name: Install VS Code
          apt:
            name: code
            state: present
            update_cache: yes

    - name: Install additional tools
      apt:
        name:
          - git
          - curl
          - wget
          - python3-pip
          - python3-venv
          - jq
          - unzip
        state: present

    - name: Configure xRDP
      block:
        - name: Create xRDP SSL certificate
          shell: |
            cd /etc/xrdp
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/xrdp/key.pem -out /etc/xrdp/cert.pem \
              -subj "/C=NL/ST=Noord-Holland/L=Amsterdam/O=Azure Docker Playground/CN=localhost"
          args:
            creates: /etc/xrdp/cert.pem

        - name: Configure xRDP settings
          lineinfile:
            path: /etc/xrdp/xrdp.ini
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
          loop:
            - { regexp: '^port=3389', line: 'port=3389' }
            - { regexp: '^crypt_level=', line: 'crypt_level=high' }
            - { regexp: '^max_bpp=', line: 'max_bpp=24' }
            - { regexp: '^xserverbpp=', line: 'xserverbpp=24' }
            - { regexp: '^security_layer=', line: 'security_layer=tls' }
            - { regexp: '^certificate=', line: 'certificate=/etc/xrdp/cert.pem' }
            - { regexp: '^key_file=', line: 'key_file=/etc/xrdp/key.pem' }
          notify: Restart xRDP

        - name: Fix black screen issue
          copy:
            content: |
              #!/bin/sh
              if [ -r /etc/default/locale ]; then
                . /etc/default/locale
                export LANG LANGUAGE
              fi
              startxfce4
            dest: /etc/xrdp/startwm.sh
            mode: '0755'
          notify: Restart xRDP

        - name: Install XFCE desktop
          apt:
            name: xfce4
            state: present

    - name: Configure firewall
      block:
        - name: Install UFW
          apt:
            name: ufw
            state: present

        - name: Allow SSH
          ufw:
            rule: allow
            port: '22'
            proto: tcp

        - name: Allow RDP
          ufw:
            rule: allow
            port: '3389'
            proto: tcp

        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny

    - name: Ensure Desktop directory exists
      file:
        path: "/home/{{ current_user }}/Desktop"
        state: directory
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'

    - name: Check for available terminal emulators
      command: which {{ item }}
      register: terminal_check
      failed_when: false
      changed_when: false
      with_items:
        - gnome-terminal
        - xfce4-terminal
        - x-terminal-emulator
        - konsole
        - xterm

    - name: Set terminal executable variable
      set_fact:
        terminal_exec: "{{ terminal_check.results | selectattr('rc', 'eq', 0) | map(attribute='stdout') | first | default('xterm') }}"

    - name: Create Terminal shortcut on Desktop
      copy:
        dest: "/home/{{ current_user }}/Desktop/ADP_Terminal.desktop"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755' # Make it executable
        content: |
          [Desktop Entry]
          Version=1.0
          Name=ADP Terminal
          Comment=Open Terminal in Azure Docker Playground directory
          Exec={{ terminal_exec }} {% if terminal_exec == 'gnome-terminal' or terminal_exec == 'xfce4-terminal' %}--working-directory={% elif terminal_exec == 'konsole' %}-e 'cd {% else %}-e "cd {% endif %}/home/{{ current_user }}/azure-docker-playground{% if terminal_exec != 'gnome-terminal' and terminal_exec != 'xfce4-terminal' %} && bash"{% endif %}
          Icon=utilities-terminal
          Terminal=false
          Type=Application
          Categories=Utility;Application;

    - name: Check if USER_GUIDE.md exists in the repository
      stat:
        path: "{{ playbook_dir }}/../docs/USER_GUIDE.md"
      register: user_guide_stat

    - name: Copy USER_GUIDE.md to Desktop from playbook directory
      copy:
        src: "{{ playbook_dir }}/../docs/USER_GUIDE.md"
        dest: "/home/{{ current_user }}/Desktop/USER_GUIDE.md"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0644'
      when: user_guide_stat.stat.exists

    # Ensure Firefox is installed
    - name: Install Firefox
      apt:
        name: firefox
        state: present
        update_cache: yes
      register: firefox_install

    # Alternative browsers if Firefox installation fails
    - name: Install alternative browser if Firefox fails
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - chromium-browser
        - epiphany-browser
      when: firefox_install.failed is defined and firefox_install.failed
      ignore_errors: yes

    # Check which browsers are available
    - name: Check for available browsers
      command: which {{ item }}
      register: browser_check
      failed_when: false
      changed_when: false
      with_items:
        - firefox
        - chromium-browser
        - epiphany-browser
        - x-www-browser

    - name: Set browser executable variable
      set_fact:
        browser_exec: "{{ browser_check.results | selectattr('rc', 'eq', 0) | map(attribute='stdout') | first | default('firefox') }}"
        browser_name: "{{ 'Firefox' if 'firefox' in (browser_check.results | selectattr('rc', 'eq', 0) | map(attribute='stdout') | first | default('firefox')) else 'Web Browser' }}"
        browser_icon: "{{ 'firefox' if 'firefox' in (browser_check.results | selectattr('rc', 'eq', 0) | map(attribute='stdout') | first | default('firefox')) else 'web-browser' }}"

    - name: Create Browser shortcut on Desktop
      copy:
        dest: "/home/{{ current_user }}/Desktop/WebBrowser.desktop"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name={{ browser_name }}
          Comment=Access the Internet
          Exec={{ browser_exec }} %u
          Icon={{ browser_icon }}
          Terminal=false
          Categories=Network;WebBrowser;

    - name: Create VS Code shortcut on Desktop
      copy:
        dest: "/home/{{ current_user }}/Desktop/VSCode.desktop"
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0755'
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Visual Studio Code
          Comment=Code Editing. Redefined.
          Exec=/usr/bin/code
          Icon=/usr/share/pixmaps/com.visualstudio.code.png
          Terminal=false
          Categories=Utility;TextEditor;Development;IDE;

  handlers:
    - name: Restart xRDP
      systemd:
        name: xrdp
        state: restarted
        enabled: yes
